generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN   @map("Admin")
  USER    @map("User")
  MANAGER @map("Manager")
}

model User {
  id                       String            @id @default(cuid())
  name                     String?
  email                    String?           @unique
  emailVerified            DateTime?
  image                    String?
  password                 String?
  role                     Role              @default(USER)
  isActive                 Boolean           @default(true)
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  createdBy                String?
  updatedBy                String?
  deletedAt                DateTime?
  clientsCreated           Client[]          @relation("ClientCreatedBy")
  clientsUpdated           Client[]          @relation("ClientUpdatedBy")
  vehiclesCreated          Vehicle[]         @relation("VehicleCreatedBy")
  vehiclesUpdated          Vehicle[]         @relation("VehicleUpdatedBy")
  policiesCreated          Policy[]          @relation("PolicyCreatedBy")
  policiesUpdated          Policy[]          @relation("PolicyUpdatedBy")
  stickersCreated          StickerIssuance[] @relation("StickerCreatedBy")
  stickersUpdated          StickerIssuance[] @relation("StickerUpdatedBy")
  stickersIssued           StickerIssuance[] @relation("StickerIssuedBy")
  stickerStockCreated      StickerStock[]    @relation("StickerStockCreatedBy")
  stickerStockUpdated      StickerStock[]    @relation("StickerStockUpdatedBy")
  vehicleTypesCreated      VehicleType[]     @relation("VehicleTypeCreatedBy")
  vehicleTypesUpdated      VehicleType[]     @relation("VehicleTypeUpdatedBy")
  bodyTypesCreated         BodyType[]        @relation("BodyTypeCreatedBy")
  bodyTypesUpdated         BodyType[]        @relation("BodyTypeUpdatedBy")
  vehicleBodyTypesCreated  VehicleBodyType[] @relation("VehicleBodyTypeCreatedBy")
  vehicleBodyTypesUpdated  VehicleBodyType[] @relation("VehicleBodyTypeUpdatedBy")
  vehicleCategoriesCreated VehicleCategory[] @relation("VehicleCategoryCreatedBy")
  vehicleCategoriesUpdated VehicleCategory[] @relation("VehicleCategoryUpdatedBy")
  stickerTypesCreated      StickerType[]     @relation("StickerTypeCreatedBy")
  stickerTypesUpdated      StickerType[]     @relation("StickerTypeUpdatedBy")
  comesaCardsCreated       ComesaCard[]      @relation("ComesaCardCreatedBy")
  comesaCardsUpdated       ComesaCard[]      @relation("ComesaCardUpdatedBy")
  comesaItemsCreated       ComesaItem[]      @relation("ComesaItemCreatedBy")
  comesaItemsUpdated       ComesaItem[]      @relation("ComesaItemUpdatedBy")
  countriesCreated         Country[]         @relation("CountryCreatedBy")
  countriesUpdated         Country[]         @relation("CountryUpdatedBy")
  countriesClearedCreated  CountryCleared[]  @relation("CountryClearedCreatedBy")
  countriesClearedUpdated  CountryCleared[]  @relation("CountryClearedUpdatedBy")
  insurersCreated          Insurer[]         @relation("InsurerCreatedBy")
  insurersUpdated          Insurer[]         @relation("InsurerUpdatedBy")
  policyCountriesCreated   PolicyCountry[]   @relation("PolicyCountryCreatedBy")
  policyCountriesUpdated   PolicyCountry[]   @relation("PolicyCountryUpdatedBy")
}

model Client {
  id            String     @id @default(cuid())
  name          String
  address       String?
  email         String?    @unique
  phone         String?
  type          ClientType @default(INDIVIDUAL)
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  createdBy     String?
  updatedBy     String?
  deletedAt     DateTime?
  createdByUser User?      @relation("ClientCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?      @relation("ClientUpdatedBy", fields: [updatedBy], references: [id])
  policies      Policy[]
  Vehicle       Vehicle[]
}

model Vehicle {
  id                String            @id @default(uuid())
  registrationNo    String            @unique
  make              String
  model             String
  year              Int
  chassisNumber     String            @unique
  engineNumber      String            @unique
  bodyTypeId        String
  categoryId        String
  clientId          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isActive          Boolean           @default(true)
  createdBy         String?
  updatedBy         String?
  deletedAt         DateTime?
  cubicCapacity     Int?
  seatingCapacity   Int?
  grossWeight       Float?
  vehicleTypeId     String
  stickers          StickerIssuance[]
  bodyType          BodyType          @relation(fields: [bodyTypeId], references: [id])
  vehicleCategory   VehicleCategory   @relation(fields: [categoryId], references: [id])
  client            Client            @relation(fields: [clientId], references: [id])
  createdByUser     User?             @relation("VehicleCreatedBy", fields: [createdBy], references: [id])
  updatedByUser     User?             @relation("VehicleUpdatedBy", fields: [updatedBy], references: [id])
  vehicleType       VehicleType       @relation(fields: [vehicleTypeId], references: [id])
  VehicleBodyType   VehicleBodyType?  @relation(fields: [vehicleBodyTypeId], references: [id])
  vehicleBodyTypeId String?
}

model VehicleType {
  id            String    @id @default(uuid())
  name          String    @unique
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  createdBy     String?
  updatedBy     String?
  deletedAt     DateTime?
  vehicles      Vehicle[]
  createdByUser User?     @relation("VehicleTypeCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?     @relation("VehicleTypeUpdatedBy", fields: [updatedBy], references: [id])
}

model BodyType {
  id            String    @id @default(uuid())
  name          String    @unique
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  createdBy     String?
  updatedBy     String?
  deletedAt     DateTime?
  createdByUser User?     @relation("BodyTypeCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?     @relation("BodyTypeUpdatedBy", fields: [updatedBy], references: [id])
  vehicles      Vehicle[]
}

model VehicleBodyType {
  id            String    @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String?
  updatedBy     String?
  isActive      Boolean   @default(true)
  deletedAt     DateTime?
  vehicles      Vehicle[]
  createdByUser User?     @relation("VehicleBodyTypeCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?     @relation("VehicleBodyTypeUpdatedBy", fields: [updatedBy], references: [id])
}

model VehicleCategory {
  id            String    @id @default(uuid())
  name          String    @unique
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  createdBy     String?
  updatedBy     String?
  deletedAt     DateTime?
  vehicles      Vehicle[]
  createdByUser User?     @relation("VehicleCategoryCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?     @relation("VehicleCategoryUpdatedBy", fields: [updatedBy], references: [id])
}

model Policy {
  id            String       @id @default(uuid())
  policyNo      String       @unique
  clientId      String
  status        PolicyStatus @default(PENDING)
  insurerId     String
  validFrom     DateTime
  validTo       DateTime
  premium       Float?
  stampDuty     Float?
  remarks       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     String?
  updatedBy     String?
  isActive      Boolean      @default(true)
  deletedAt     DateTime?
  client        Client       @relation(fields: [clientId], references: [id])
  createdByUser User?        @relation("PolicyCreatedBy", fields: [createdBy], references: [id])
  insurer       Insurer      @relation(fields: [insurerId], references: [id])
  updatedByUser User?        @relation("PolicyUpdatedBy", fields: [updatedBy], references: [id])

  @@index([clientId])
  @@index([insurerId])
}

model StickerIssuance {
  id            String        @id @default(uuid())
  policyId      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     String?
  updatedBy     String?
  createdByUser User?         @relation("StickerCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?         @relation("StickerUpdatedBy", fields: [updatedBy], references: [id])
  isActive      Boolean       @default(true)
  deletedAt     DateTime?
  issuedAt      DateTime?
  issuedBy      String?
  issuedByUser  User?         @relation("StickerIssuedBy", fields: [issuedBy], references: [id])
  vehicle       Vehicle       @relation(fields: [vehicleId], references: [id])
  vehicleId     String
  stockId       String?       @unique
  stock         StickerStock? @relation(fields: [stockId], references: [id])
  StickerType   StickerType?  @relation(fields: [stickerTypeId], references: [id])
  stickerTypeId String?
}

model StickerType {
  id            String            @id @default(uuid())
  name          String            @unique
  description   String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  isActive      Boolean           @default(true)
  createdBy     String?
  updatedBy     String?
  deletedAt     DateTime?
  stickers      StickerIssuance[]
  createdByUser User?             @relation("StickerTypeCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?             @relation("StickerTypeUpdatedBy", fields: [updatedBy], references: [id])
  StickerStock  StickerStock[]
}

model StickerStock {
  id            String           @id @default(uuid())
  serialNumber  String           @unique
  stickerType   StickerType      @relation(fields: [stickerTypeId], references: [id])
  stickerTypeId String
  stickerStatus StickerStatus    @default(AVAILABLE)
  receivedAt    DateTime         @default(now())
  insurerId     String
  insurer       Insurer          @relation(fields: [insurerId], references: [id])
  sticker       StickerIssuance?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  createdBy     String?
  updatedBy     String?
  deletedAt     DateTime?
  isActive      Boolean          @default(true)
  createdByUser User?            @relation("StickerStockCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?            @relation("StickerStockUpdatedBy", fields: [updatedBy], references: [id])
}

model ComesaCard {
  id            String       @id @default(uuid())
  cardNumber    String       @unique
  policyId      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  isActive      Boolean      @default(true)
  createdBy     String?
  updatedBy     String?
  deletedAt     DateTime?
  createdByUser User?        @relation("ComesaCardCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?        @relation("ComesaCardUpdatedBy", fields: [updatedBy], references: [id])
  items         ComesaItem[]
}

model ComesaItem {
  id            String     @id @default(uuid())
  name          String
  quantity      Int
  value         Float
  comesaCardId  String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  isActive      Boolean    @default(true)
  createdBy     String?
  updatedBy     String?
  deletedAt     DateTime?
  comesaCard    ComesaCard @relation(fields: [comesaCardId], references: [id])
  createdByUser User?      @relation("ComesaItemCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?      @relation("ComesaItemUpdatedBy", fields: [updatedBy], references: [id])
}

model Country {
  id            String           @id @default(uuid())
  name          String           @unique
  code          String           @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  isActive      Boolean          @default(true)
  createdBy     String?
  updatedBy     String?
  deletedAt     DateTime?
  createdByUser User?            @relation("CountryCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?            @relation("CountryUpdatedBy", fields: [updatedBy], references: [id])
  clearedItems  CountryCleared[]
  PolicyCountry PolicyCountry[]
}

model CountryCleared {
  id            String    @id @default(uuid())
  countryId     String
  itemName      String
  quantity      Int
  value         Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  createdBy     String?
  updatedBy     String?
  deletedAt     DateTime?
  country       Country   @relation(fields: [countryId], references: [id])
  createdByUser User?     @relation("CountryClearedCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?     @relation("CountryClearedUpdatedBy", fields: [updatedBy], references: [id])
}

model PolicyCountry {
  id            String   @id @default(uuid())
  policyId      String
  countryId     String
  cleared       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String?
  updatedBy     String?
  country       Country  @relation(fields: [countryId], references: [id])
  createdByUser User?    @relation("PolicyCountryCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?    @relation("PolicyCountryUpdatedBy", fields: [updatedBy], references: [id])
}

model Insurer {
  id            String         @id @default(uuid())
  name          String         @unique
  code          String         @unique
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdBy     String?
  updatedBy     String?
  deletedAt     DateTime?
  policies      Policy[]
  createdByUser User?          @relation("InsurerCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?          @relation("InsurerUpdatedBy", fields: [updatedBy], references: [id])
  StickerStock  StickerStock[]
}

enum PolicyStatus {
  ACTIVE    @map("Active")
  EXPIRED   @map("Expired")
  CANCELLED @map("Cancelled")
  PENDING   @map("Pending")
  INACTIVE  @map("Inactive")
}

enum UsageType {
  PRIVATE    @map("Private")
  COMMERCIAL @map("Commercial")
  GOVERNMENT @map("Government")
}

enum ClientType {
  INDIVIDUAL @map("Individual")
  BUSINESS   @map("Business")
  GOVERNMENT @map("Government")
  NON_PROFIT @map("NonProfit")
}

enum StickerStatus {
  AVAILABLE @map("Available")
  ISSUED    @map("Issued")
  VOIDED    @map("Voided")
  EXPIRED   @map("Expired")
}
